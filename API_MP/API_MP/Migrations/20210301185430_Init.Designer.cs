// <auto-generated />
using System;
using API_MP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API_MP.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210301185430_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API_MP.Model.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c48cbdad-2ed6-47b5-a949-e83f10e484e1",
                            ConcurrencyStamp = "ff7acd48-c20a-4e61-abfd-88b4a65eeb10",
                            Name = "Trener",
                            NormalizedName = "TRENER"
                        },
                        new
                        {
                            Id = "8b76af91-6aec-45b0-a930-fa95c80532ac",
                            ConcurrencyStamp = "c6537cc0-aa77-4670-ad0c-41bc812a90a9",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("API_MP.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("WhatITeach")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a94b31e-6ac5-4165-91d6-d98d193f0d26",
                            Email = "trener@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Pavel",
                            LastName = "Markovič",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRENER@GMAIL.COM",
                            NormalizedUserName = "TRENER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHf+p5jH2e6bp4cQfeOhlXRYatTVuKSFJHDWvlAXBvb/8jbgalZ2ZyawZvhpbunPdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "695f7a4a-d7e6-40ca-9690-bff26c84a59c",
                            TwoFactorEnabled = false,
                            UserName = "trener@gmail.com",
                            WhatITeach = "Tenis"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04199b78-53fb-44ad-a69b-5ce25337c489",
                            Email = "student@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            LastName = "Polívka",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@GMAIL.COM",
                            NormalizedUserName = "STUDENT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBmN2bjWpd/3Ho5/XmooCiRQ2OIi0YXn/ak8KoWu2blXgVZ2/pXQMhGHOyrcVIf98g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ca9d3e2-e563-4c6e-a195-a91baad101c5",
                            TwoFactorEnabled = false,
                            UserName = "student@gmail.com"
                        });
                });

            modelBuilder.Entity("API_MP.Model.Change", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("API_MP.Model.Hour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Person")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isOnetime")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Hours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            End = new DateTime(2021, 2, 22, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 2, 22, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = true
                        },
                        new
                        {
                            Id = 2,
                            End = new DateTime(2021, 2, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 2, 22, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        },
                        new
                        {
                            Id = 3,
                            End = new DateTime(2021, 2, 23, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 2, 23, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        },
                        new
                        {
                            Id = 4,
                            End = new DateTime(2021, 2, 23, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 2, 23, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        },
                        new
                        {
                            Id = 5,
                            End = new DateTime(2021, 2, 24, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 2, 24, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = true
                        },
                        new
                        {
                            Id = 6,
                            End = new DateTime(2021, 2, 24, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 2, 24, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = true
                        },
                        new
                        {
                            Id = 7,
                            End = new DateTime(2021, 2, 25, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 2, 25, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        },
                        new
                        {
                            Id = 8,
                            End = new DateTime(2021, 2, 25, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 2, 25, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        },
                        new
                        {
                            Id = 9,
                            End = new DateTime(2021, 2, 26, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 2, 26, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        },
                        new
                        {
                            Id = 10,
                            End = new DateTime(2021, 2, 26, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 2, 26, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = true
                        },
                        new
                        {
                            Id = 19,
                            End = new DateTime(2021, 3, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 3, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        },
                        new
                        {
                            Id = 20,
                            End = new DateTime(2021, 3, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 3, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = true
                        },
                        new
                        {
                            Id = 11,
                            End = new DateTime(2021, 3, 2, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 3, 2, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = true
                        },
                        new
                        {
                            Id = 12,
                            End = new DateTime(2021, 3, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 3, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        },
                        new
                        {
                            Id = 13,
                            End = new DateTime(2021, 3, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 3, 3, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        },
                        new
                        {
                            Id = 14,
                            End = new DateTime(2021, 3, 3, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 3, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        },
                        new
                        {
                            Id = 15,
                            End = new DateTime(2021, 3, 4, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 3, 4, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = true
                        },
                        new
                        {
                            Id = 16,
                            End = new DateTime(2021, 3, 4, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 3, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = true
                        },
                        new
                        {
                            Id = 17,
                            End = new DateTime(2021, 3, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 3, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        },
                        new
                        {
                            Id = 18,
                            End = new DateTime(2021, 3, 5, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenis",
                            Person = "2",
                            Requester = "1",
                            Start = new DateTime(2021, 3, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            isOnetime = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "c48cbdad-2ed6-47b5-a949-e83f10e484e1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "8b76af91-6aec-45b0-a930-fa95c80532ac"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("API_MP.Model.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API_MP.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API_MP.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("API_MP.Model.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_MP.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API_MP.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
